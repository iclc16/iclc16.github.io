string <- as.character(string)
string <- unlist(strsplit(string, " "))
# omit punctuation if specified
if(omit_punctuation) {
string <- string[grep("[[:alnum:]]", string)]
}
# length of string
l      <- length(string)
if(l < n) {
return(paste(string, sep="", collapse = " "))
} else {
return(paste(string[1:n], sep="", collapse = " "))
}
}
tx <- scan(filename, what="character", sep="\n", encoding = "UTF-8")
# get Left, Right, Key
findlines <- grep("<kwic>", tx)
lc <- gsub(".*<left_context>|</left_context>.*", "", tx[findlines])
key <- gsub(".*<kwic>|</kwic>.*", "", tx[findlines])
rc <- gsub(".*<right_context>|</right_context.*", "", tx[findlines])
# get metadata, if available
if(any(grepl("<ref>", tx))) {
mt <- grep("<ref>", tx)
mt <- gsub(".*<ref>|</ref>.*", "", tx[mt])
# in some cases, the metadata element in <ref> is empty,
# therefore we have to check first whether mt contains
# any strings at all:
if(!all(sapply(1:length(mt), function(i) identical(mt[[i]], character(0)))) &
!all(sapply(1:length(mt), function(i) mt[[i]]==""))) {
# if the metadata contain URLs, this can cause problems if the URL
# contains commas. This line detects URLs with commas and
# replaces them
mt <- gsub(",(?=.*html?,)", "%%%COMMA%%%", mt, perl=T)
# get individual metadata
mt <- lapply(1:length(mt), function(i) unlist(strsplit(mt[i], ",")))
# get maximal length
mtMax <- max(sapply(1:length(mt), function(i) length(mt[[i]])))
# if necessary, add more elements to mt (= vector for metadata)
for(i in 1:length(mt)) {
if(length(mt[[i]])<mtMax) {
mt[[i]][((length(mt[[i]]))+1):(mtMax)] <- NA
}
}
# transform to df
kwic <- as.data.frame(matrix(ncol=mtMax, nrow=length(mt)),
stringsAsFactors = F)
for(i in 1:nrow(kwic)) {
kwic[i,] <- mt[[i]]
}
# add colnames
colnames(kwic) <- paste("Metatag", 1:mtMax, sep="")
# transform %%%COMMA%%% in URLs back to real commas
kwic$Metatag1 <- gsub("%%%COMMA%%%", "", kwic$Metatag1)
# add left, right, key
kwic$Left <- lc
kwic$Key <- key
kwic$Right <- rc
} else {
kwic <- data.frame(Left  = lc,
Key   = key,
Right = rc)
}
} else {
kwic <- data.frame(Left  = lc,
Key   = key,
Right = rc)
}
# create _with_anno column
kwic$Key_with_anno   <- kwic$Key
# function for getting annotations
# (the lookaround assertions make sure that slashes
# that belong to the original text are NOT replaced)
get_anno <- function(myTx) {
w <- .splitter(trimws(gsub("[[:space:]]+/(?![[:space:]])", "/", myTx, perl = T)), " ")
w <- w[which(w!="")] # remove empty vector elements
w <- lapply(1:length(w), function(i) .splitter(w[i], "(?<!^)/", perl = T))
return(w)
}
# how many annotation tags?
w <- get_anno(kwic$Key[1])
la <- max(sapply(1:length(w), function(i) length(w[[i]])))
paste_anno <- function(myTx, k) {
w <- get_anno(myTx)
w <- paste0(sapply(1:length(w), function(i) w[[i]][k]), collapse = " ")
return(w)
}
# add columns
l <- length(kwic)
kwic[, (l+1):(l+la)] <- NA
colnames(kwic)[(l+1):(l+la)] <- paste0("Tag", 1:la, "_Key", sep = "")
# status update
if(verbose) {
cat("Processing tags in the keyword column ... \n")
}
# fill columns
for(j in 1:la) {
kwic[, l+j] <- sapply(1:nrow(kwic), function(i) paste_anno(kwic$Key[i], j))
}
# strip tags from Key column
kwic$Key <- kwic$Tag1_Key
View(kwic)
# create _with_anno columns
kwic$Left_with_anno  <- kwic$Left
kwic$Right_with_anno <- kwic$Right
# how many annotation tags?
w <- get_anno(kwic$Left[1])
la <- max(sapply(1:length(w), function(i) length(w[[i]])))
# add columns: left
l <- length(kwic)
kwic[, (l+1):(l+la)] <- NA
colnames(kwic)[(l+1):(l+la)] <- paste0("Tag", 1:la, "_Left", sep = "")
# fill columns: left
for(j in 1:(la)) {
kwic[, l+j] <- sapply(1:nrow(kwic), function(i) paste_anno(kwic$Left[i], j))
}
# strip tags from Left column
kwic$Left <- kwic$Tag1_Left
View(kwic)
View(kwic)
# add columns: right
l <- length(kwic)
kwic[, (l+1):(l+la)] <- NA
colnames(kwic)[(l+1):(l+la)] <- paste0("Tag", 1:la, "_Right", sep = "")
# fill columns: right
for(j in 1:la) {
kwic[, l+j] <- sapply(1:nrow(kwic), function(i) paste_anno(kwic$Right[i], j))
}
# strip tags from Left column
kwic$Right <- kwic$Tag2_Right
# reorder columns
lf  <- grep("Tag.*_Left", colnames(kwic))
ky  <- grep("Tag.*_Key", colnames(kwic))
rgt <- grep("Tag.*_Right", colnames(kwic))
lwa <- which(colnames(kwic)=="Left_with_anno")
rwa <- which(colnames(kwic)=="Right_with_anno")
kwa <- which(colnames(kwic)=="Key_with_anno")
kwic <- kwic[,c(1:(min(c(lf, ky, rgt, lwa, rwa, kwa))-1), lwa, kwa, rwa, lf, ky, rgt)]
View(kwic)
64-24
40/326
71.60+49
120.6+108
1320+340+360
554 * 1.5
831*10
655.39*10
655.39*1.5
983.085*10
655.39*2.5
1638*10
1638*7
1638*5
1638*5
553.94*2.5
1384.85*10
1384.85*7
1384.85*5
74100*3
222300*0.65
7935.95*2
15871.9*3
80100+74100+15871.9+85196
80100+74100+15871.9
80100+74100+15871.9
240300+144495+48615.7
170071.90*3
80100*3
74100*3
74100*0.65
48165*3
80100+48165+15871.9
144136.9*3
240300+144495+47615
240300+144495+47615.7
170071.9*3
144136.9*3
80100*3
48165*3
15871.9*3
240300+144495+47615.7
234*2
300+470
320/5
320/4
460+640+400
432410.7+6000+3000+15000
library(concordances)
citation("concordances")
6100*60
library(tidyverse)
library(googlesheets4)
gs4_deauth()
read_sheet("https://docs.google.com/spreadsheets/d/1zKoKMFtRHufZuio941yIMOw2EdHYOTzrR20hFq4ZlXQ/edit?usp=sharing", sheet = "Sheet1")
# read sheet
d <- read_sheet("https://docs.google.com/spreadsheets/d/1zKoKMFtRHufZuio941yIMOw2EdHYOTzrR20hFq4ZlXQ/edit?usp=sharing", sheet = "Sheet1")
# pivot to longer
d
?pivot_longer
# pivot to longer
d %>% pivot_longer(cols = c(2:8))
# pivot to longer
d %>% pivot_longer(cols = c(3:8))
# pivot to longer
d %>% pivot_longer(cols = c(3:8)) %>% setNames(c("Beispielsatz", "Kategorie", "n")) %>%
ggplot(aes(x = Beispielsatz, y = n, group = `Wortstellung im Original`)) +
geom_col()
# pivot to longer
d %>% pivot_longer(cols = c(3:8)) %>% setNames(c("Beispielsatz", "Wortstellung", "Kategorie", "n")) %>%
ggplot(aes(x = Beispielsatz, y = n, group = Wortstellung)) +
geom_col()
# pivot to longer
d %>% pivot_longer(cols = c(3:8)) %>% setNames(c("Beispielsatz", "Wortstellung", "Kategorie", "n"))
# pivot to longer
d %>% pivot_longer(cols = c(3:8)) %>% setNames(c("Beispielsatz", "Wortstellung", "Kategorie", "n")) %>%
ggplot(aes(x = Beispielsatz, y = n, fill = Kategorie, group = Wortstellung)) +
geom_col()
?geom_col
# pivot to longer
d %>% pivot_longer(cols = c(3:8)) %>% setNames(c("Beispielsatz", "Wortstellung", "Kategorie", "n")) %>%
ggplot(aes(x = Beispielsatz, y = n, group = Kategorie)) +
geom_col() + facet_grid(~ Wortstellung)
# pivot to longer
d %>% pivot_longer(cols = c(3:8)) %>% setNames(c("Beispielsatz", "Wortstellung", "Kategorie", "n")) %>%
ggplot(aes(x = Beispielsatz, y = n, group = Kategorie)) +
geom_col(position = position_dodge()) + facet_grid(~ Wortstellung)
# pivot to longer
d %>% pivot_longer(cols = c(3:8)) %>% setNames(c("Beispielsatz", "Wortstellung", "Kategorie", "n")) %>%
ggplot(aes(x = Beispielsatz, y = n, group = Kategorie, fill = Kategorie)) +
geom_col(position = position_dodge()) + facet_grid(~ Wortstellung)
# pivot to longer
d %>% pivot_longer(cols = c(3:8)) %>% setNames(c("Beispielsatz", "Wortstellung", "Kategorie", "n")) %>%
ggplot(aes(x = Beispielsatz, y = n, group = Kategorie, fill = Kategorie)) +
geom_col(position = position_dodge()) + facet_grid(~ Wortstellung) +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12))
# pivot to longer
d %>% pivot_longer(cols = c(3:8)) %>% setNames(c("Beispielsatz", "Wortstellung", "Kategorie", "n")) %>%
ggplot(aes(x = Beispielsatz, y = n, group = Kategorie, fill = Kategorie)) +
geom_col(position = position_dodge()) + facet_grid(~ Wortstellung)
setwd("~/sciebo/Projekte/ICLC16/githubpage")
library(tidyverse)
library(googlesheets4)
# files
gs4_deauth()
prog <- read_sheet("https://docs.google.com/spreadsheets/d/1M5ZaoYkOrl0PQf3JbWwEz9GYVEwyXPWISGmhIGPSUAQ/edit?usp=sharing", sheet = "Talks")
library(readxl)
# list of registrations
r1 <- read_xlsx("/Users/stefanhartmann/sciebo/Projekte/ICLC16/Registration/iclc_23-booking-list.xlsx")
r2 <- read_xlsx("/Users/stefanhartmann/sciebo/Projekte/ICLC16/Registration/results-survey877384.xlsx")
# list of registrations
r1 <- read_xlsx("/Users/stefanhartmann/sciebo/Projekte/ICLC16/Registration/iclc_23-booking-list.xlsx")
# list of registrations
r1 <- read_xlsx("/Users/stefanhartmann/sciebo/Projekte/ICLC16/Registration/iclc_23-booking-list.xlsx", sheet = 2)
paste0(r1$Vorname, r1$Nachname)
paste0(r1$Vorname, r1$Nachname, collapse = " ")
paste0(r1$Vorname, r1$Nachname, sep = " ")
paste0(r1$Vorname, " ", r1$Nachname)
r1$Name <- paste0(r1$Vorname, " ", r1$Nachname)
r2$Name <- paste0(r2$`First name(s)`, " ", r2$`Last name`)
View(r1)
colnames(r1)
# simpler colnames
colnames(r1[58:62])
# simpler colnames
colnames(r1)[58:62]
# simpler colnames
colnames(r1)[58:62] <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
r1[58]
r1[58:62]
r1 <- replace_na(58:62, 0)
replace_na
replace_na
?replace_na
library(tidyverse)
library(googlesheets4)
library(readxl)
# list of talks
gs4_deauth()
prog <- read_sheet("https://docs.google.com/spreadsheets/d/1M5ZaoYkOrl0PQf3JbWwEz9GYVEwyXPWISGmhIGPSUAQ/edit?usp=sharing", sheet = "Talks")
# list of registrations
r1 <- read_xlsx("/Users/stefanhartmann/sciebo/Projekte/ICLC16/Registration/iclc_23-booking-list.xlsx", sheet = 2)
r2 <- read_xlsx("/Users/stefanhartmann/sciebo/Projekte/ICLC16/Registration/results-survey877384.xlsx")
# simpler colnames
colnames(r1)[58:62] <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
colnames(r2)
colnames(r2)[14:18]
colnames(r2)[14:18] <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
r2[14:18]
r1[,58:62]
is.na(r1[,58:62])
r1[,58:62]
r1[,58:62] %>% View()
replace_na(r1[,58:62], 0)
r1[,58:62] %>% replace_na(0)
r1[,58:62] %>% replace_na(Monday = 0, Tuesday = 0, Wednesday = 0, Thursday = 0, Friday = 0)
r1[,58:62] %>% replace_na(list(Monday = 0, Tuesday = 0, Wednesday = 0, Thursday = 0, Friday = 0))
r1 %>% replace_na(list(Monday = 0, Tuesday = 0, Wednesday = 0, Thursday = 0, Friday = 0))
r1 %>% replace_na(c(Monday = 0, Tuesday = 0, Wednesday = 0, Thursday = 0, Friday = 0))
r1 %>% replace_na(list(Monday = 0, Tuesday = 0, Wednesday = 0, Thursday = 0, Friday = 0))
r1$Monday
r1 %>% replace_na(list(Monday = "no", Tuesday = "no", Wednesday = "no", Thursday = "no", Friday = "no"))
r1 <- r1 %>% replace_na(list(Monday = "no", Tuesday = "no", Wednesday = "no", Thursday = "no", Friday = "no"))
gsub("1", "no", r1[,58:62])
gsub("1", "no", r1[,58])
r1
r1[58,]
r1[,58]
# get dates
select(r1, Name, Monday, Tuesday, Wednesday, Thursday, Friday)
# full names
r1$Name <- paste0(r1$Vorname, " ", r1$Nachname)
r2$Name <- paste0(r2$`First name(s)`, " ", r2$`Last name`)
# get dates
select(r1, Name, Monday, Tuesday, Wednesday, Thursday, Friday)
select(r2, Name, Monday, Tuesday, Wednesday, Thursday, Friday)
# get dates
rbind(select(r1, Name, Monday, Tuesday, Wednesday, Thursday, Friday),
select(r2, Name, Monday, Tuesday, Wednesday, Thursday, Friday))
# get dates
r <- rbind(select(r1, Name, Monday, Tuesday, Wednesday, Thursday, Friday),
select(r2, Name, Monday, Tuesday, Wednesday, Thursday, Friday))
r
View(r)
r
r[,c(2:length(r))]
all(r[,c(2:length(r))]=="no")
(r[,c(2:length(r))]
r[,c(2:length(r))]
r[,c(2:length(r))]
r[1,c(2:length(r))]
all(r[1,c(2:length(r))]=="no")
sapply(1:nrow(r), function(i) all(r[i,c(2:length(r))]=="no"))
which(sapply(1:nrow(r), function(i) all(r[i,c(2:length(r))]=="no")))
r[which(sapply(1:nrow(r), function(i) all(r[i,c(2:length(r))]=="no"))),]
r[which(sapply(1:nrow(r), function(i) all(r[i,c(2:length(r))]=="no"))),2:length(r)]
r[which(sapply(1:nrow(r), function(i) all(r[i,c(2:length(r))]=="no"))),2:length(r)] <- "yes"
r[1,]
any(r[1,]=="no")
sapply(1:nrow(r), function(i) any(r[1,]=="no"))
sapply(1:nrow(r), function(i) any(r[i,]=="no"))
ifelse(sapply(1:nrow(r), function(i) any(r[i,]=="no")), "y", "n")
r$all_days <- ifelse(sapply(1:nrow(r), function(i) any(r[i,]=="no")), "n", "y")
View(r)
r$all_days <- ifelse(sapply(1:nrow(r), function(i) any(r[i,] %in% c("no", "No"))), "n", "y")
r[1,]
which(r[1,] %in% c("1", "yes", "Yes"))
colnames(r)[which(r[1,] %in% c("1", "yes", "Yes"))]
paste0(colnames(r)[which(r[1,] %in% c("1", "yes", "Yes"))], sep = ",")
paste0(colnames(r)[which(r[1,] %in% c("1", "yes", "Yes"))], collapse = ",")
paste0(colnames(r)[which(r[1,] %in% c("1", "yes", "Yes"))], collapse = ", ")
sapply(1:nrow(r), function(i) paste0(colnames(r)[which(r[i,] %in% c("1", "yes", "Yes"))], collapse = ", "))
r[which(sapply(1:nrow(r), function(i) all(r[i,c(2:length(r))]=="No"))),2:length(r)] <- "yes"
paste0(colnames(r)[which(r[1,] %in% c("1", "yes", "Yes"))], collapse = ", ")
paste0(colnames(r)[which(r[1,] %in% c("1", "yes", "Yes"))], collapse = ", ")
sapply(1:nrow(r), function(i) paste0(colnames(r)[which(r[i,] %in% c("1", "yes", "Yes"))], collapse = ", "))
r[which(sapply(1:nrow(r), function(i) all(r[i,c(2:length(r))]=="No"))),2:length(r)]
View(r)
# list of registrations
r1 <- read_xlsx("/Users/stefanhartmann/sciebo/Projekte/ICLC16/Registration/iclc_23-booking-list.xlsx", sheet = 2)
r2 <- read_xlsx("/Users/stefanhartmann/sciebo/Projekte/ICLC16/Registration/results-survey877384.xlsx")
# simpler colnames
colnames(r1)[58:62] <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
colnames(r2)[14:18] <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
r1 <- r1 %>% replace_na(list(Monday = "no", Tuesday = "no", Wednesday = "no", Thursday = "no", Friday = "no"))
# full names
r1$Name <- paste0(r1$Vorname, " ", r1$Nachname)
r2$Name <- paste0(r2$`First name(s)`, " ", r2$`Last name`)
# get dates
r <- rbind(select(r1, Name, Monday, Tuesday, Wednesday, Thursday, Friday),
select(r2, Name, Monday, Tuesday, Wednesday, Thursday, Friday))
# correct those where all were NA (because nothing was selected)
r[which(sapply(1:nrow(r), function(i) all(r[i,c(2:length(r))]=="no"))),2:length(r)] <- "yes"
r[which(sapply(1:nrow(r), function(i) all(r[i,c(2:length(r))]=="No"))),2:length(r)] <- "yes"
# find all persons that are not going to attend on all days
r$all_days <- ifelse(sapply(1:nrow(r), function(i) any(r[i,] %in% c("no", "No"))), "n", "y")
sapply(1:nrow(r), function(i) paste0(colnames(r)[which(r[i,] %in% c("1", "yes", "Yes"))], collapse = ", "))
r$days <- sapply(1:nrow(r), function(i) paste0(colnames(r)[which(r[i,] %in% c("1", "yes", "Yes"))], collapse = ", "))
r[1,]
r[1,]$Name
grep(r[1,]$Name, prog$Authors)
find_name <- grep(r[1,]$Name, prog$Authors)
View(prog)
grep("Pleyer", r)
grep("Pleyer", r$Name)
find_name <- grep(r[270,]$Name, prog$Authors)
prog[find_name,]
# combine with the list of accepted presentations
prog$when <- NA
prog[find_name,]$when
paste0(prog[find_name,]$when, r[270,]$days)
find_name
find_name
# insert the days
prog[find_name,]
# insert the days
prog[find_name,]
# insert the days
prog[find_name,]
# insert the days
prog$Monday <- 0
prog$Tuesday <- 0
prog$Wednesday <- 0
prog$Thursday <- 0
prog$Friday <- 0
# find the name of the author in the programme
find_name <- grep(r[270,]$Name, prog$Authors)
# insert the days
find_name
# insert the days
find_name[1]
# insert the days
prog[find_name[1],]
# insert the days
r[1,]$Monday
# insert the days
r[1,]$Monday %in% c("1","yes","Yes")
# insert the days
ifelse(r[1,]$Monday %in% c("1","yes","Yes"), 1, 0)
ifelse(r[1,]$Monday %in% c("1","yes","Yes"), 1, 0)
prog[find_name[1],]
prog[find_name[1],]$Monday
prog[find_name[1],]$Monday
ifelse(r[1,]$Monday %in% c("1","yes","Yes"), 1, 0)
prog[find_name,]$Monday
prog[find_name,]$Monday <- ifelse(r[1,]$Monday %in% c("1","yes","Yes"), 1, 0)
prog[find_name,]$Monday <- ifelse(r[1,]$Monday %in% c("1","yes","Yes"), 1, 0)
prog[find_name,]$Tuesday <- ifelse(r[1,]$Tuesday %in% c("1","yes","Yes"), 1, 0)
prog[find_name,]$Wednesday <- ifelse(r[1,]$Wednesday %in% c("1","yes","Yes"), 1, 0)
prog[find_name,]$Thursday <- ifelse(r[1,]$Thursday %in% c("1","yes","Yes"), 1, 0)
prog[find_name,]$Friday <- ifelse(r[1,]$Friday %in% c("1","yes","Yes"), 1, 0)
prog[find_name,]
prog[find_name,]$Monday
prog[find_name,]$Tuesday
for(i in 1:nrow(r)) {
# find the name of the author in the programme
find_name <- grep(r[270,]$Name, prog$Authors)
# insert the days
prog[find_name,]$Monday <- ifelse(r[i,]$Monday %in% c("1","yes","Yes"), 1, 0)
prog[find_name,]$Tuesday <- ifelse(r[i,]$Tuesday %in% c("1","yes","Yes"), 1, 0)
prog[find_name,]$Wednesday <- ifelse(r[i,]$Wednesday %in% c("1","yes","Yes"), 1, 0)
prog[find_name,]$Thursday <- ifelse(r[i,]$Thursday %in% c("1","yes","Yes"), 1, 0)
prog[find_name,]$Friday <- ifelse(r[i,]$Friday %in% c("1","yes","Yes"), 1, 0)
}
View(prog)
r[2,]
r[2,]$Monday
for(i in 1:nrow(r)) {
# find the name of the author in the programme
find_name <- grep(r[i,]$Name, prog$Authors)
# insert the days
prog[find_name,]$Monday <- ifelse(r[i,]$Monday %in% c("1","yes","Yes"), 1, 0)
prog[find_name,]$Tuesday <- ifelse(r[i,]$Tuesday %in% c("1","yes","Yes"), 1, 0)
prog[find_name,]$Wednesday <- ifelse(r[i,]$Wednesday %in% c("1","yes","Yes"), 1, 0)
prog[find_name,]$Thursday <- ifelse(r[i,]$Thursday %in% c("1","yes","Yes"), 1, 0)
prog[find_name,]$Friday <- ifelse(r[i,]$Friday %in% c("1","yes","Yes"), 1, 0)
}
View(prog)
View(r)
r$Monday
r$Monday %>% unique
r$Tuesday %>% unique
for(i in 1:nrow(r)) {
# find the name of the author in the programme
find_name <- grep(r[i,]$Name, prog$Authors)
# insert the days
prog[find_name,]$Monday <- ifelse(r[i,]$Monday %in% c("no","No", "N/A"), 0, 1)
prog[find_name,]$Tuesday <- ifelse(r[i,]$Tuesday %in% c("no","No", "N/A"), 0, 1)
prog[find_name,]$Wednesday <- ifelse(r[i,]$Wednesday %in% c("no","No", "N/A"), 0, 1)
prog[find_name,]$Thursday <- ifelse(r[i,]$Thursday %in% c("no","No", "N/A"), 0, 1)
prog[find_name,]$Friday <- ifelse(r[i,]$Friday %in% c("no","No", "N/A"), 0, 1)
}
View(r)
# paste days in programme
prog[1,]
colnames(prog)
# paste days in programme
prog[,23:27]
# paste days in programme
prog[1,23:27]
# paste days in programme
prog[3,23:27]
# paste days in programme
prog[5,23:27]
# paste days in programme
prog[8,23:27]
# paste days in programme
prog[11,23:27]
# paste days in programme
prog[13,23:27]
# paste days in programme
prog[15,23:27]
# paste days in programme
which(prog[15,23:27]==1)
# paste days in programme
prog[15,23:27](which(prog[15,23:27]==1))
# paste days in programme
prog[15,23:27][which(prog[15,23:27]==1)]
# paste days in programme
colnames(prog[15,23:27][which(prog[15,23:27]==1)])
# paste days in programme
paste0(colnames(prog[15,23:27][which(prog[15,23:27]==1)]), collapse = ", ")
# paste days in programme
sapply(1:nrow(prog), function(i) paste0(colnames(prog[i,23:27][which(prog[i,23:27]==1)]), collapse = ", "))
# paste days in programme
prog$days <- sapply(1:nrow(prog), function(i) paste0(colnames(prog[i,23:27][which(prog[i,23:27]==1)]), collapse = ", "))
View(prog)
prog$days
prog$all_days <- ifelse(prog$days %in% c("Monday, Tuesday, Wednesday, Thursday, Friday", ""), "y", "n")
library(writexl)
# export
write_xlsx(prog, "days.xlsx")
#tbl <- read_sheet("https://docs.google.com/spreadsheets/d/1M5ZaoYkOrl0PQf3JbWwEz9GYVEwyXPWISGmhIGPSUAQ/edit?usp=sharing", sheet = "Talks")
tbl <- read_xlsx("Talks.xlsx", sheet = "Talks")
